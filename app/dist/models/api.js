System.register(["breeze"], function (_export) {
  var breeze, _classCallCheck, RepositoryConfig;

  return {
    setters: [function (_breeze) {
      breeze = _breeze["default"];
    }],
    execute: function () {
      "use strict";

      _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

      RepositoryConfig = function RepositoryConfig() {
        _classCallCheck(this, RepositoryConfig);

        var DT = breeze.DataType;
        var Identity = breeze.AutoGeneratedKeyType.Identity;
        this.initialize = function (metadataStore) {
          // Repository information
          metadataStore.addEntityType({
            shortName: "Repository",
            namespace: "AureliaDocs",
            autoGeneratedKeyType: Identity,
            dataProperties: {
              id: { dataType: "Int32", isPartOfKey: true },
              name: { dataType: "String" },
              description: { dataType: "String" },
              isConstructor: { dataType: "Boolean" }
            },
            navigationProperties: {
              classes: {
                entityTypeName: "Class", isScalar: false,
                associationName: "Repository_Classes"
              },
              methods: {
                entityTypeName: "Method", isScalar: false,
                associationName: "Repository_Methods"
              },
              properties: {
                entityTypeName: "Property", isScalar: false,
                associationName: "Repository_Properties"
              },
              events: {
                entityTypeName: "Event", isScalar: false,
                associationName: "Repository_Events"
              },
              repoDTO: {
                entityTypeName: "RepositoryDTO", isScalar: true,
                associationName: "Repository_RepositoryDTO", foreignKeyNames: ["id"]
              }
            }
          });

          // Class information
          metadataStore.addEntityType({
            shortName: "Class",
            namespace: "AureliaDocs",
            autoGeneratedKeyType: Identity,
            dataProperties: {
              id: { dataType: "Int32", isPartOfKey: true },
              name: { dataType: "String" },
              file: { dataType: "String" },
              line: { dataType: "Int32" },
              description: { dataType: "String" },
              repositoryId: { dataType: "Int32" }
            },
            navigationProperties: {
              repository: {
                entityTypeName: "Repository", isScalar: true,
                associationName: "Repository_Classes", foreignKeyNames: ["repositoryId"]
              },
              methods: {
                entityTypeName: "Method", isScalar: false,
                associationName: "Class_Methods"
              },
              properties: {
                entityTypeName: "Property", isScalar: false,
                associationName: "Class_Properties"
              },
              events: {
                entityTypeName: "Event", isScalar: false,
                associationName: "Class_Events"
              }
            }
          });

          // Method information
          metadataStore.addEntityType({
            shortName: "Method",
            namespace: "AureliaDocs",
            dataProperties: {
              id: { dataType: "Int32", isPartOfKey: true },
              name: { dataType: "String" },
              line: { dataType: "Int32" },
              description: { dataType: "String" },
              repositoryId: { dataType: "Int32" },
              classId: { dataType: "Int32" }
            },
            navigationProperties: {
              repository: {
                entityTypeName: "Repository", isScalar: true,
                associationName: "Repository_Classes", foreignKeyNames: ["repositoryId"]
              },
              classDef: {
                entityTypeName: "Class", isScalar: true,
                associationName: "Class_Methods", foreignKeyNames: ["classId"]
              },
              params: {
                entityTypeName: "Parameter", isScalar: false,
                associationName: "Method_Parameters"
              }
            }
          });

          // Param information
          metadataStore.addEntityType({
            shortName: "Param",
            namespace: "AureliaDocs",
            autoGeneratedKeyType: Identity,
            dataProperties: {
              id: { dataType: "Int32", isPartOfKey: true },
              name: { dataType: "String" },
              description: { dataType: "String" },
              type: { dataType: "String" }
            }
          });

          // Property information
          metadataStore.addEntityType({
            shortName: "Property",
            namespace: "AureliaDocs",
            autoGeneratedKeyType: Identity,
            dataProperties: {
              id: { dataType: "Int32", isPartOfKey: true },
              name: { dataType: "String" }
            }
          });

          // Event information
          metadataStore.addEntityType({
            shortName: "Event",
            namespace: "AureliaDocs",
            autoGeneratedKeyType: Identity,
            dataProperties: {
              id: { dataType: "Int32", isPartOfKey: true },
              name: { dataType: "String" }
            }
          });

          // Registry information
          metadataStore.addEntityType({
            shortName: "Registry",
            namespace: "AureliaDocs",
            autoGeneratedKeyType: Identity,
            dataProperties: {
              id: { dataType: "Int32", isPartOfKey: true },
              name: { dataType: "String" },
              type: { dataType: "String" },
              tag: { dataType: "String" },
              parent: { dataType: "String" }
            }
          });

          metadataStore.registerEntityTypeCtor("Repository", null, repositoryInitializer);
          metadataStore.registerEntityTypeCtor("Class", null, classInitializer);
          metadataStore.registerEntityTypeCtor("Method", null, methodInitializer);
          metadataStore.registerEntityTypeCtor("Registry", null, registryInitializer);

          function repositoryInitializer(repository) {
            repository.visible = false;
          }
          function classInitializer(classObj) {
            classObj.visible = false;
          }
          function methodInitializer(method) {
            method.visible = false;
          }
          function registryInitializer(registry) {
            registry.searchName = function () {
              return registry.parent + "/" + registry.name + "#" + registry.type;
            };
          }
        };
      };

      _export("RepositoryConfig", RepositoryConfig);
    }
  };
});
//# sourceMappingURL=data:application/json;base64,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